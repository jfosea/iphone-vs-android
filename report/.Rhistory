summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
summary(aov(noseedlings ~ PlotNumber + insecticide, data=insect.df))
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
options(digits=5)
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
options(digits=5)
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
hockeystickaov2 = aov(shotspeed ~ sticktype + player, data=hockeystick.df)
summary(hockeystickaov2)
summary(lm(shotspeed ~ sticktype + player, data=hockeystick.df))
summary(hockeystickaov2)
summary(lm(shotspeed ~ sticktype + player, data=hockeystick.df))
summary(lm((noseedlings ~ insecticide + PlotNumber, data=insect.df))
summary(lm(noseedlings ~ insecticide + PlotNumber, data=insect.df))
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
PlotNumber = rep(c("1", "2", "3", "4"), 3)
insecticide = c(rep(c("I1"), 4), rep(c("I2"), 4), rep(c("I3"), 4))
noseedlings = c(56, 48, 66, 62, 83, 78, 94, 93, 80, 72, 83, 85)
insect.df = data.frame(PlotNumber, insecticide, noseedlings)
insect.df
options(digits=5)
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
summary(aov(noseedlings ~ insecticide + PlotNumber, data=insect.df))
MSE <-  4
MSblock <-146
MSE <-  4.33
b <- 4
k <- 3
num <- (b-1)*MSblock + b*(k-1)*MSE
den <- (k*b-1)*MSE
num/den
shotspeed = c(87.8, 84.2, 88.4, 88, 92.2, 83.1, 83.0, 93.9, 75.3, 89.2, 93.0, 97.1, 101.2, 100.0, 90.1, 86.3, 82.8, 92.2, 80.3, 83.1)
sticktype = c(rep("Wood", 5), rep("A", 5), rep("B", 5), rep("C", 5))
hockeystick.df = data.frame(sticktype, shotspeed)
# add players
player = rep(c("Flopsy", "HT", "Pilot", "Touchee", "Buddy"), 4)
player
hockeystick.df = cbind(player, hockeystick.df)
hockeystick.df
hockeystickaov2 = aov(shotspeed ~ sticktype + player, data=hockeystick.df)
hockeystickaov2
hockeystickaov2
xyplot(shotspeed ~ sticktype, groups=player, auto.key=list(columns=2, lines=TRUE, points=FALSE), type='a', data=hockeystick.df)
library(mosaic)
library(mosaic)
xyplot(shotspeed ~ sticktype, groups=player, auto.key=list(columns=2, lines=TRUE, points=FALSE), type='a', data=hockeystick.df)
# there seems to be no interaction between the hockey stick and player
# multiple comparison test
hockeystickTukey = TukeyHSD(aov(shotspeed ~ sticktype + player, data=hockeystick.df), conf.level=0.95)
hockeystickTukey
mplot(hockeystickTukey)
routes = c(rep("A",5), rep("B", 5), rep("C", 5), rep("D", 5)) #reads in routes by column
daysweek = c(rep(c("Mon", "Tues", "Wed", "Thur", "Fri"), 4))
commutetime = c(22, 26, 25, 25, 31, 25, 27, 28, 26, 29, 26, 28, 33, 30, 33, 26, 26, 27, 30, 30)
commute.df = data.frame(routes, daysweek, commutetime)
commute.df = data.frame(routes, daysweek, commutetime)
commute.df
summary(commaov <- aov(commutetime~routes + daysweek, data=commute.df))
commaov
summary(commaov <- aov(commutetime~routes + daysweek, data=commute.df))
xyplot(commutetime ~ routes, groups=daysweek, auto.key=list(columns=2, lines=TRUE, points=FALSE), type='a', data=commute.df)
library(ggplot2)
library(mosaic)
library(EnvStats)
library(lawstat)
library(DescTools)
library(lme4)
library(lme4)
routes = c(rep("A",5), rep("B", 5), rep("C", 5), rep("D", 5)) #reads in routes by column
daysweek = c(rep(c("Mon", "Tues", "Wed", "Thur", "Fri"), 4))
commutetime = c(22, 26, 25, 25, 31, 25, 27, 28, 26, 29, 26, 28, 33, 30, 33, 26, 26, 27, 30, 30)
commute.df = data.frame(routes, daysweek, commutetime)
commute.df
fit.commute = lmer(commutetime ~ routes + (1|daysweek), data=commute.df)  #(1|player) signifiies the random effect/factor of player
summary(fit.commute)
summary(commaov <- aov(commutetime~routes + daysweek, data=commute.df))
summary(fit.commute)
windows()
windows()
windows()
position = rep(c("1","2","3","4"), 4)
vehicle = rep(c("I","II","III","IV"),c(4,4,4,4))
tirebrand = c("C","D","A","B","D","A","B","C","A","B","C","D","B","C","D","A")
treadwear = c(12, 13, 17, 14, 11, 14, 14, 12, 13, 13, 10, 11,  8,  9,  9, 13)
tireB.df = data.frame(tirebrand, vehicle, position, treadwear)
tireB.df
latinsq.aov = aov(treadwear ~ tirebrand + vehicle + position, data=tireB.df)
latinsq.aov
summary(latinsq.aov)
col1 <- c(1.75, 1.43, 1.28, 1.66)
col3 <- c(1.35, 1.73, 1.69, 1.41)
col4 <- c(1.45, 1.36, 1.65, 1.73)
row1 <- c(1.75, 1.43, 1.28, 1.66)
row2 <- c(1.7, 1.78, 1.4, 1.31)
row3 <- c(1.35, 1.73, 1.69, 1.41)
watermelon.df <- rbdind(row1, row2, row3, row4)
watermelon.df <- rbind(row1, row2, row3, row4)
row4 <- c(1.45, 1.36, 1.65, 1.73)
watermelon.df <- rbind(row1, row2, row3, row4)
watermelon.df
stack(watermelon.df)
watermelon.df
watermelon.df <- rbind(row1, row2, row3, row4)
a <- c("A", "D", "C", "B")
b <- c("B", "A", "D", "C")
c <- c("C", "B", "A", "D")
d <- c("D", "C", "B", "A")
df <- rbdind(a, b,c,d)
df <- rbind(a, b,c,d)
c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4))
plot <- c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4))
brand <- c(a, b, c, d)
brand
yield <- c(row1, row2, row3, row4)
data.frame(plot, brand, yield)
melonWeight = c(1.75, 1.70, 1.35, 1.45, 1.43, 1.78, 1.73, 1.36, 1.28, 1.40, 1.69, 1.65, 1.66, 1.31, 1.41, 1.73)
plantrow = rep(c("1", "2", "3", "4"), 4)
plantcol = c(rep(c("1"), 4), rep(c("2"), 4), rep(c("3"), 4), rep(c("4"), 4))
treatType = c("A", "B", "C", "D", "D", "A", "B", "C", "C", "D", "A", "B", "B", "C", "D", "A")
watermelon.df = data.frame(treatType, plantrow, plantcol, melonWeight)
watermelon.df
melonWeight = c(1.75, 1.70, 1.35, 1.45, 1.43, 1.78, 1.73, 1.36, 1.28, 1.40, 1.69, 1.65, 1.66, 1.31, 1.41, 1.73)
plantrow = rep(c("1", "2", "3", "4"), 4)
plantcol = c(rep(c("1"), 4), rep(c("2"), 4), rep(c("3"), 4), rep(c("4"), 4))
treatType = c("A", "B", "C", "D", "D", "A", "B", "C", "C", "D", "A", "B", "B", "C", "D", "A")
watermelon.df = data.frame(treatType, plantrow, plantcol, melonWeight)
watermelon.df
summary(aov(melonWeight~treatType + plantrow + plantcol, data=watermelon.df))
num <- 0.00028 + 0.00412 - (6*0.00012)
num/denom
denom <- (7*0.00012)
num/denom
p <- 4
p <- 4
denom <- (p*0.00012)
num/denom
summary(aov(melonWeight~treatType + plantrow + plantcol, data=watermelon.df))
watermelonLatin <- summary(aov(melonWeight~treatType + plantrow + plantcol, data=watermelon.df))
watermelonLatin <- aov(melonWeight~treatType + plantrow + plantcol, data=watermelon.df)
TukeyHSD(watermelonLatin, ordered= T)
# recode factors
gender <- c(2, 1, 1, 2, 0, 1, 1)
# recoding table, stored in a simple vector
recode <- c(male = 1, female = 2)
(gender <- factor(gender, levels = recode, labels = names(recode)))
# recode factors
gender <- c(2, 1, 1, 2, 0, 1, 1)
recode <- c(male = 1, female = 2)
gender <- factor(gender, levels = recode, labels = names(recode))
SSFactorA <- 2227.458
SSFactorB <- 3996.083
SSTlec <- 7187.958
SSElec <- 507.5
SSAB
df <- 3*3
1-pf(MSAB, 3,3)
MSAB <- SSAB / df
SSAB <- SSTlec - SSFactorA - SSFactorB - SSElec
MSAB <- SSAB / df
1-pf(MSAB, 3,3)
df <- 3*2
MSAB <- SSAB / df
1-pf(MSAB, 3,3)
SSE <- 456.917
dfmse <- 6
MSE <- SSE/dfmse
MSAB/MSE
stabilizetime = c(18, 16, 15, 16, 24, 28, 31, 35, 33, 30, 42, 46, 22, 27, 24, 21, 40, 37, 39, 36, 35, 38, 52, 57, 15, 12, 10, 16, 28, 24)
emercond = c(rep("1", 6), rep("2", 6), rep("3", 6), rep("4", 6), rep("5", 6))
dashboardtype = rep(c("A", "A", "B", "B", "C", "C"), 5)
airtraffic.df = data.frame(emercond, dashboardtype, stabilizetime)
airtraffic.df
library(ggplot2)
library(mosaic)
library(EnvStats)
library(lawstat)
library(DescTools)
library(lme4)
pestvar.aov = aov(stabilizetime ~ dashboardtype + emercond + dashboardtype:emercond, data=airtraffic.df) #the interaction term is specified by pest:variety
#also, bushelstree ~ pest*variety will work
pestvar.aov
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
interaction.plot(x.factor = dashboardtype, trace.factor = emercond, response=stabilizetime, fun=mean, col=c("orange", "green", "blue"), xlab="dashboard Type", ylab="Mean stabilize time per dashboard", main="Interaction Plot")
interaction.plot(x.factor = emercond, trace.factor = dashboardtype, response=stabilizetime, fun=mean, col=c("orange", "green", "blue"), xlab="dashboard Type", ylab="Mean stabilize time per dashboard", main="Interaction Plot")
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
MSAB <- 6.1
F.int <- MSAB/MSE
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
1-pf(F.int, 8, 15)
# 4
pestvar.aov = aov(stabilizetime ~ dashboardtype + emercond + dashboardtype:emercond, data=airtraffic.df)
# 4
stabilize.aov = aov(stabilizetime ~ dashboardtype + emercond, data=airtraffic.df)
summary(stabilize.aov)
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
summary(stabilize.aov)
TukeyHSD(stabilize.aov, ordered= T)
mplot(a)
# 5
a <- PostHocTest(stabilize.aov, ordered = T)
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd)
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
mplot(a)
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
library(ggplot2)
library(mosaic)
library(EnvStats)
library(lawstat)
library(DescTools)
library(lme4)
stabilizetime = c(18, 16, 15, 16, 24, 28, 31, 35, 33, 30, 42, 46, 22, 27, 24, 21, 40, 37, 39, 36, 35, 38, 52, 57, 15, 12, 10, 16, 28, 24)
emercond = c(rep("1", 6), rep("2", 6), rep("3", 6), rep("4", 6), rep("5", 6))
dashboardtype = rep(c("A", "A", "B", "B", "C", "C"), 5)
airtraffic.df = data.frame(emercond, dashboardtype, stabilizetime)
airtraffic.df
pestvar.aov = aov(stabilizetime ~ dashboardtype + emercond + dashboardtype:emercond, data=airtraffic.df) #the interaction term is specified by pest:variety
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
# 1
0.554 # pvalue
# 2
interaction.plot(x.factor = emercond, trace.factor = dashboardtype, response=stabilizetime, fun=mean, col=c("orange", "green", "blue"), xlab="dashboard Type", ylab="Mean stabilize time per dashboard", main="Interaction Plot")
# 3
0.554 # pvalue
# 4
stabilize.aov = aov(stabilizetime ~ dashboardtype + emercond, data=airtraffic.df)
summary(stabilize.aov)
# emergency condition effect: Yes, pvalue = 2.10e-14
# dashboard effect: Yes, pvalue = 1.39e-11
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
mplot(a)
stabilizetime = c(18, 16, 15, 16, 24, 28, 31, 35, 33, 30, 42, 46, 22, 27, 24, 21, 40, 37, 39, 36, 35, 38, 52, 57, 15, 12, 10, 16, 28, 24)
emercond = c(rep("1", 6), rep("2", 6), rep("3", 6), rep("4", 6), rep("5", 6))
dashboardtype = rep(c("A", "A", "B", "B", "C", "C"), 5)
airtraffic.df = data.frame(emercond, dashboardtype, stabilizetime)
airtraffic.df
pestvar.aov = aov(stabilizetime ~ dashboardtype + emercond + dashboardtype:emercond, data=airtraffic.df) #the interaction term is specified by pest:variety
#also, bushelstree ~ pest*variety will work
summary(pestvar.aov)
# 1
0.554 # pvalue
# 2
interaction.plot(x.factor = emercond, trace.factor = dashboardtype, response=stabilizetime, fun=mean, col=c("orange", "green", "blue"), xlab="dashboard Type", ylab="Mean stabilize time per dashboard", main="Interaction Plot")
# 3
0.554 # pvalue
# 4
stabilize.aov = aov(stabilizetime ~ dashboardtype + emercond, data=airtraffic.df)
summary(stabilize.aov)
# emergency condition effect: Yes, pvalue = 2.10e-14
# dashboard effect: Yes, pvalue = 1.39e-11
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
mplot(a)
mplot(a)
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
a
# 4
stabilize.aov = aov(stabilizetime ~ dashboardtype + emercond, data=airtraffic.df)
summary(stabilize.aov)
# 5
a <- PostHocTest(stabilize.aov, ordered = T, method='hsd')
mplot(a)
b <-TukeyHSD(stabilize.aov, ordered=T)
mplot(a)
a
b
a
summary(stabilize.aov)
b
1-pbinom(1,0.018638,49)
1-pbinom(1,49, 0.018638)
1-pbinom(0,49, 0.018638)
sum(dbinom(1:.49,0.018638))
sum(dbinom(1:,49,0.018638))
sum(dbinom(1:49,49,0.018638))
sum(dbinom(0:1,49,0.018638))
sum(dbinom(3:7,49,0.018638))
dpois(0,2.7)
1-ppois(0,2.7)
1-dpois(0,2.7)
dpois(1,2.7)/(ppois(3,2.7))
pexp
qexp(0.15, 0.25)
qexp(0.15, rate = 1/4, lower.tail = TRUE, log.p = FALSE)
plot(qexp(0.15, rate = 1/4, lower.tail = TRUE, log.p = FALSE))
library(mosaic)
qnorm(0.32, mean = 0.66, sd = 0.07, lower.tail = TRUE, log.p = FALSE)
1-0.32
qnorm(0.66, mean = 0.66, sd = 0.07, lower.tail = FALSE, log.p = FALSE)
pexp(45, 45)
qexp(45, 45)
qexp(0.45, rate = 45, lower.tail = TRUE, log.p = FALSE)
qexp(0.45, rate = 1/45, lower.tail = TRUE, log.p = FALSE)
qnorm(0.7, mean = 0.60, sd = 0.12, lower.tail = FALSE, log.p = FALSE)
qnorm(0.07, mean = 0.60, sd = 0.12, lower.tail = FALSE, log.p = FALSE)
qnorm(0.07, mean = 0.60, sd = 0.12, lower.tail = FALSE, log.p = FALSE)
qnorm(0.07, mean = 0.60, sd = 0.12, lower.tail = FALSE)
dbinom(6, 29, 0.6)
dbinom(6, 29, 0.7967)
dbinom(6, 29, 1-0.7967)
pnorm(0.5, 0.60, 0.12)
dbinom(6, 29, 0.2023284)
qnorm(0.2, mean = 4.15, sd = 0.71, lower.tail = TRUE)
pnorm(4.15, 4.15, 0.71)
choose(16, 7) * 0.5^8 *0.5^9
r = 63 # th time
p = 0.86 # prob
n = 81 - r #
# exact
dnbinom(x = n, size = r, prob = p)
# set working directy (note: for Justin and Cam, this may change according
# to your personal computer)
setwd("C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report")
# importing data
proj <- read.csv('gp.csv')
head(proj)
tail(proj)
proj <- read.csv('gp.csv')
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj <- read.csv('gp.csv')
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
setwd("C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report")
proj <- read.csv('gp.csv')
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj
setwd("C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report")
proj <- read.csv('gp.csv')
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj$e.terms <- residuals(proj.aov)
proj$fit.terms <- residuals(proj.aov)
# setting up libraries
library(ggplot2)
library(mosaic)
library(dplyr)
library(EnvStats)
library(lawstat)
library(DescTools)
library(gridExtra)
library(MASS)
library(car)
library(ggpubr)
# set working directy (note: for Justin and Cam, this may change according
# to your personal computer)
setwd("C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report")
# importing data
proj <- read.csv('gp.csv')
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj$e.terms <- residuals(proj.aov)
proj$fit.terms <- residuals(proj.aov)
ggplot(data=proj, aes(sample = e.terms)) + stat_qq(size=2, col="blue") + stat_qqline(col="red") + ggtitle("Normal Probability Plot of Residuals")
shapiro.test(proj$e.terms) # p-value = 1.203e-05
# variance stabilization
a <- favstats(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
logstats.df
logstats.df
a <- favstats(Time ~ Brand, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
logstats.df
summary(lm(logsds ~ logmeans, data=logstats.df))
a <- favstats(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
summary(lm(logsds ~ logmeans, data=logstats.df))
summary(lm(logsds ~ logmeans, data=logstats.df))
a <- favstats(Time ~ Brand, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
logstats.df
summary(lm(logsds ~ logmeans, data=logstats.df))
1 - 1.1516 # lambda = 0.125
a <- favstats(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
logstats.df
summary(lm(logsds ~ logmeans, data=logstats.df))
1 - 0.8406 # lambda = 0.125
lambda <- 0.125
a <- favstats(Time ~ Brand, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
logstats.df
summary(lm(logsds ~ logmeans, data=logstats.df))
1 - 1.1516 # lambda = 0.125
lambda <- 0.125
1 - 1.1516 # lambda = 0.125
lambda <- -0.1516
proj$TimeT <- as.numeric(proj$Time)^lambda
proj.aovT = aov(TimeT ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj$e.termsT <- residuals(proj.aovT)
shapiro.test(proj$e.termsT) # p-value = 0.02603
lambda <- 0.125
a <- favstats(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
logsds = log(a$sd)
logmeans = log(a$mean)
logstats.df = data.frame(a$Brand, logsds, logmeans)
summary(lm(logsds ~ logmeans, data=logstats.df))
1 - 0.8406 # lambda = 0.125
lambda <- 0.125
proj$TimeT <- as.numeric(proj$Time)^lambda
proj.aovT = aov(TimeT ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
proj$e.termsT <- residuals(proj.aovT)
shapiro.test(proj$e.termsT) # p-value = 0.02603
summary(lm(logsds ~ logmeans, data=logstats.df))
source('C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report/project_code.R')
# analysis
proj.aovT = aov(TimeT ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
summary(proj.aovT)
# analysis
proj.aovT = aov(TimeT ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
summary(proj.aovT)
summary(lm(TimeT ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj))
bon.t <- qt(1 - (0.05/(2*1)), df=48)
summary(proj.aovT)
bon.t <- qt(1 - (0.05/(2*1)), df=48)
mse <- 0.0013
b <- 2
c <- 3
nij <- 5
favstat(TimeT <- Brand, data=proj)
favstat(TimeT <- Brand, data=proj)
# setting up libraries
library(ggplot2)
library(mosaic)
library(dplyr)
library(EnvStats)
library(lawstat)
library(DescTools)
library(gridExtra)
library(MASS)
library(car)
library(ggpubr)
favstat(TimeT <- Brand, data=proj)
favstats(TimeT <- Brand, data=proj)
# set working directy (note: for Justin and Cam, this may change according
# to your personal computer)
setwd("C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report")
# importing data
proj <- read.csv('gp.csv')
head(proj)
tail(proj)
bon.t <- qt(1 - (0.05/(2*1)), df=48)
mse <- 0.0013
b <- 2
c <- 3
nij <- 5
favstats(TimeT <- Brand, data=proj)
proj
favstats(TimeT ~ Brand, data=proj)
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
summary(prj.aov)
summary(proj.aov)
favstats(TimeT ~ Brand, data=proj)
favstats(Time ~ Brand,  data=proj)
a <- favstats(Time ~ Brand,  data=proj)
a$mean[1]
samsung.mean <- a$mean[2]
apple.mean <- a$mean[1]
samsung.mean <- a$mean[2]
(apple.mean - samsung.mean) + c(-1,1) * bon.t * sqrt(mse/(b*c*nij))
nijl <- 5
(apple.mean - samsung.mean) + c(-1,1) * bon.t * sqrt(mse/(b*c*nijl))
(apple.mean - samsung.mean) + c(-1,1) * bon.t * sqrt(mse/(b*c*nijl))
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
summary(proj.aov)
# importing data
proj <- read.csv('gp.csv')
# residual plot
windows()
proj.aov = aov(Time ~ Brand + Brand:Connection + Brand:Connection:Message, data=proj)
summary(proj.aov)
source('C:/Users/surfacepro/Google Drive/STAT425_GROUP/project_report/project_code.R')
bon.t <- qt(1 - (0.05/(2*1)), df=48)
mse <- 0.0013
b <- 2
c <- 3
nijl <- 5
proj
a <- favstats(Time ~ Brand,  data=proj)
a <- favstats(Time ~ Brand,  data=proj)
apple.mean <- a$mean[1]
samsung.mean <- a$mean[2]
(apple.mean - samsung.mean) + c(-1,1) * bon.t * sqrt(mse/(b*c*nijl))
bon.t <- qt(1 - (0.05/(2*1)), df=48)
mse <- 62
c <- 3
b <- 2
nijl <- 5
a <- favstats(Time ~ Brand,  data=proj)
apple.mean <- a$mean[1]
samsung.mean <- a$mean[2]
(apple.mean - samsung.mean) + c(-1,1) * bon.t * sqrt(mse/(b*c*nijl))
knitr::include_graphics("design.png")
